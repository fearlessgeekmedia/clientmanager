#!/usr/bin/env bash

#The clients file is temporarily saved here while working on it
clients_file="clients.txt"

#Adding the client to the clients file
function add_client {
    echo "${1}|${2}|${3}|${4}" >> "$clients_file"
}

#Editing the chosen client from the clients file
function edit_client {
    index=$1
    new_data="$2|$3|$4|$5"
    sed -i "${index}s/.*/${new_data}/" "$clients_file"
}

#Deleting a client
function delete_client {
    selected_client=$(cat "$clients_file" | fzf --delimiter="|")
    if [ -z "$selected_client" ]; then
        echo "No client selected."
    else
        grep -v -F -x "$selected_client" "$clients_file" > "temp_clients.txt"
        mv "temp_clients.txt" "$clients_file"
    fi
}

function preselect_services {
    needs="$1"
    rm -f preselected_services.txt
    touch preselected_services.txt
    cat services.txt | while IFS= read -r service; do
        if grep -q -F -x "$service" <<< "$needs"; then
            printf 'true\n'
        else
            printf 'false\n'
        fi
    done >> preselected_services.txt
}

#Saving clients to a more permanent file
function save_clients {
    cp "$clients_file" "$1"
}

#Loading saved clients
function load_clients {
    cp "$1" "$clients_file"
}

#Exporting clients to a JSON file
function export_clients_json {
    read -p "Enter file name for json file (without the .json extension): " json_filename
    json_output="["
    while IFS="|" read -r name email phone needs; do
        json_output+="$(printf '{"name": "%s", "email": "%s", "phone": "%s", "needs": "%s"},' "$name" "$email" "$phone" "$needs")"
    done < "$clients_file"
    json_output="${json_output%,}]"
    echo "$json_output" > "$json_filename.json"
    sleep 5
}

#The main menu
while true; do
    clear
    echo "Fearless Geek Media Client Management System"
    echo "============================================"
    echo "1. Add Client"
    echo "2. Edit Client"
    echo "3. Delete Client"
    echo "4. Save Clients"
    echo "5. Load Clients"
    echo "6. Export Clients to JSON"
    echo "7. Exit"
    read -p "Enter your choice: " choice

    case $choice in
        1)  
            #Adding a new client
            clear
            read -p "Enter client name: " name
            while true; do
                read -e -p "Enter new client email: " email
                [[ $email =~ ^.+@.+\..+$ ]] && break
                printf "Invalid email\n"
            done
            while true; do
                 read -e -p "Enter new client phone (just numbers, no parenthesese or dashes): " -i "${client_data[2]}" phone
                [[ ! $phone == 0* && ${#phone} == 10 && $phone =~ [0-9]+$ ]] && break;
                printf "Invalid\n"
            done
            #read -p "Enter client needs - separated by a semicolon: " needs
            selected_services=$(cat services.txt | fzf -m --delimiter='\n' --print-query)
            needs=$(echo "$selected_services" | tail -n +2 | paste -sd ";")
            add_client "$name" "$email" "$phone" "$needs"
            ;;
        2)
            # Editing a new client
            clear
            selected_client=$(cat "$clients_file" | fzf --delimiter="|"  --preview="echo {}" --preview-window=down:1 | awk -F'|' 'BEGIN {OFS="|"} {print $1,$2,$3,$4}')
            if [ -z "$selected_client" ]; then
                echo "No client selected."
            else
                selected_client_escaped=$(echo "$selected_client" | sed 's/\./\\./g')
                index=$(grep -n -F -x "$selected_client_escaped" "$clients_file" | cut -d: -f1)
                IFS='|' read -ra client_data <<< "$selected_client"
                echo "Selected client: ${client_data[0]}, ${client_data[1]}, ${client_data[2]}"
                read -e -p "Enter new client name: " -i "${client_data[0]}" name
                while true; do
                    read -e -p "Enter new client email: " -i "${client_data[1]}" email
                    [[ $email =~ ^.+@.+\..+$ ]] && break
                    printf "Invalid email\n"
                done
                while true; do
                    read -e -p "Enter new client phone (just numbers, no parenthesese or dashes): " -i "${client_data[2]}" phone
                    [[ ! $phone == 0* && ${#phone} == 10 && $phone =~ [0-9]+$ ]] && break;
                    printf "Invalid email\n"
                done

                # Read the current needs and store them in an array
        
                IFS=';' read -ra current_needs <<< "${client_data[3]}"

                
            
                # Create a new array to store the updated needs
                updated_needs=()
        
                # Loop through the current needs and use FZF to edit them
                for need in "${current_needs[@]}"; do
                    updated_need=$(echo "$need" | fzf --query="$need" --header="Edit the need (use Ctrl+K and Ctrl+J to navigate, Enter to confirm):")
                    if [ -n "$updated_need" ]; then
                        updated_needs+=("$updated_need")
                    fi
                done
        
                # Use FZF to select new needs from services.txt
                PS3="Select a service to add (0 to finish): "
                while true; do
                    selected_service=$(echo -e "${current_needs[*]}\n$(grep -vxF "${current_needs[*]}" services.txt)" | fzf --prompt="Select a service to add (0 to finish): ")
                    if [[ "$selected_service" == "0" ]]; then
                        break
                    elif [[ "$selected_service" ]]; then
                        if [[ "${updated_needs[@]}" =~ "${selected_service}" ]]; then
                            printf "Service already selected\n"
                        else
                            updated_needs+=("$selected_service")
                        fi
                    else
                        printf "Invalid selection\n"
                    fi
                done
        
                # Convert the updated needs array to a semicolon-separated string
                needs=$(IFS=';' ; echo "${updated_needs[*]}")

                edit_client "$index" "$name" "$email" "$phone" "$needs"
            fi
            ;;
        3)
            # Deleting a client
            clear   
            delete_client
            ;;
        4)
            # Saving clients to a file
            clear
            read -p "Enter the file name to save clients: " filename
            save_clients "$filename"
           ;;
        5)
            # Loading clients from a file
            clear
            read -p "Enter the file name to load clients: " filename
            load_clients "$filename"
            ;;
        6)
            # Exporting to JSON
            clear
            export_clients_json
            ;;
        7)
            # Exiting procedures
            clear
            read -p "Do you want to save your data before exiting? (y/n): " save_choice
            if [ "$save_choice" == "y" ]; then
                read -p "Enter the file name to save clients: " filename
                save_clients "$filename"
            fi
            # Getting rid of the clients.txt file
            rm -f clients.txt
            exit 0
            ;;
        *)
            echo "Invalid choice. Please try again."
            ;;
    esac
done